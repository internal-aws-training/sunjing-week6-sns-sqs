Parameters:
  SNSTopicName:
    Type: String
    Default: beauty
  AlarmSNSTopicName:
    Type: String
    Default: SNSAlarm
  MyQName:
    Type: String
    Default: my-queue
  MyDLQName:
    Type: String
    Default: my-dl-queue
  SNSAlarmName:
    Type: String
    Default: sns-publish-message-failed

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 300

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-policy-log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
        - PolicyName: lambda-policy-receive-message
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt MySourceQueue.Arn

  MySourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref MyQName
      MessageRetentionPeriod: 104800
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
        maxReceiveCount: 1

  MyDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref MyDLQName

  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MySourceQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MySNSTopic
      Queues:
        - !Ref MySourceQueue

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSTopicName
      Subscription:
        -
          Endpoint: !GetAtt MySourceQueue.Arn
          Protocol: sqs
        -
          Endpoint: jing.sun@rea-group.com
          Protocol: email

  MyEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MySourceQueue.Arn
      FunctionName: !Ref LambdaFunction

  CloudWatchTriggerSNSRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !Ref MySNSTopic
          Id: 1

  AlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: jing.sun@rea-group.com
          Protocol: email
      TopicName: !Ref AlarmSNSTopicName

  SNSAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: SNS failed
      AlarmName: !Ref AlarmSNSTopicName
      AlarmActions:
        - !Ref AlarmSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      EvaluationPeriods: 1
      Statistic: Average
      MetricName: NumberOfNotificationsFailed
      Namespace: SNS
      Period: 300
      Dimensions:
        - Name: TopicName
          Value: beauty
